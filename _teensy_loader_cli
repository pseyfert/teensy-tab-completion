#compdef teensy_loader_cli

# Copyright (C) 2018 Paul Seyfert
#
# This software is distributed under the terms of the GNU General Public License
# version 3 (GPL Version 3), copied verbatim in the file LICENSE.


_list_controllers() {
  # this is ugly, see http://zsh.sourceforge.net/Doc/Release/Expansion.html
  # inside out this does
  # $(teensy_loader_cli --list-mcus): obtain a list of mcus, format:
  # > Supported MCUs are:
  # >  - at90usb162
  # >  - atmega32u4
  # >  - at90usb646
  # ${(f)<something>}:                split at line breaks
  # ${<something>:#<expression>}:     remove elements matching the expression from array
  # ${(M)<something>:#<expression>}:  remove *non*-matching elements instead
  # ${<something>##<expression>}:     remove the match of expression from <something> if
  #                                   the beginning of <something> matches. Two # mean
  #                                   largest match
  # ${(@)<something>}:                roughly, keep the result an array when stored to
  #                                   variable
  
  local -a controllers; controllers=${(@)${(M)${(f)"$(teensy_loader_cli --list-mcus)"}:# - *}## - }
  _values 'mcu controllers' ${controllers[@]}
}

_complete_mcu() {
  # if the current word already has the equal sign, then get list of controllers
  if compset -P '*='; then
    _wanted mcu-controllers expl 'mcu controller' _list_controllers
  else
  # otherwise suggest '--mcu' and add the suffix '=' instead of filling a whitespace
    local firstarg; firstarg=("--mcu:choose mcu controller to use")
    _describe -t 'mcu-controller-flag' 'specify mcu controller' firstarg -qS=
    # TODO: offer --list-mcus
  fi
}

_teensy_flags() {
  # copy and paste from the help message
  _arguments \
    "-w[Wait for device to appear]" \
    "-r[Use hard reboot if device not online]" \
    "-s[Use soft reboot if device not online (Teensy3.x only)]" \
    "-n[No reboot after programming]" \
    "-b[Boot only, do not program]" \
    "-v[Verbose output]" \
}

# TODO: could probably be more elegant with standard completion functions but this way
#       might keep the entry barrier low

# mcu flag goes first, don't allow anything else
if [[ $CURRENT == 2 ]]; then
  _complete_mcu
else
  # only suggest any of the flags, if the current word starts with a '-'
  # i.e. user has "asked" for these options
  if [[ $words[$CURRENT] == -* ]] ; then
    _teensy_flags
  # otherwise, suggest directories and files ending with .hex
  else
    _path_files -g '*(/) *.hex'
  fi
fi
